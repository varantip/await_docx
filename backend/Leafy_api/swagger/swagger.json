{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API\n",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/base_plants/": {
            "get": {
                "tags": [
                    "base_plants"
                ],
                "description": "get all PlantTypes\n\u003cbr\u003e",
                "operationId": "PlantTypeController.GetAll",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PlantType"
                        }
                    }
                }
            }
        },
        "/base_plants/{id}": {
            "get": {
                "tags": [
                    "base_plants"
                ],
                "description": "get plant_type by id\n\u003cbr\u003e",
                "operationId": "PlantTypeController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PlantType"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            }
        },
        "/diseases/": {
            "get": {
                "tags": [
                    "diseases"
                ],
                "description": "get all Diseases\n\u003cbr\u003e",
                "operationId": "DiseaseController.GetAll",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Disease"
                        }
                    }
                }
            }
        },
        "/diseases/{id}": {
            "get": {
                "tags": [
                    "diseases"
                ],
                "description": "get Disease by id\n\u003cbr\u003e",
                "operationId": "DiseaseController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Disease"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            }
        },
        "/notifications/": {
            "post": {
                "tags": [
                    "notifications"
                ],
                "description": "Add a Notification\n\u003cbr\u003e",
                "operationId": "NotificationController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The notfication, date specified like so: YYYY-MM-DD hh:mm:ss+tz (for kaliningrad = 02)",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Notification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/notifications/{uid}": {
            "get": {
                "tags": [
                    "notifications"
                ],
                "description": "Gather Notifs by Id\n\u003cbr\u003e",
                "operationId": "NotificationController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "notifications"
                ],
                "description": "Delete all expired notifications\n\u003cbr\u003e",
                "operationId": "NotificationController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The user_id for which you check and delete notifications",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} success"
                    }
                }
            }
        },
        "/user/": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "get all Users\n\u003cbr\u003e",
                "operationId": "UserController.GetAll",
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "Authorization header. example: Bearer {token}",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": ":not authorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "user"
                ],
                "description": "create users\n\u003cbr\u003e",
                "operationId": "UserController.CreateUser",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{int} models.User.User_id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Logs user into the system\n\u003cbr\u003e",
                "operationId": "UserController.Login",
                "parameters": [
                    {
                        "in": "query",
                        "name": "login",
                        "description": "The login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "password",
                        "description": "The password",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} login success"
                    },
                    "403": {
                        "description": "user not exist"
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Logs out current logged in user session\n\u003cbr\u003e",
                "operationId": "UserController.logout",
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "description": "Authorization header. example: Bearer {token}",
                        "schema": {
                            "$ref": "#/definitions/true"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} logout success"
                    }
                }
            }
        },
        "/user/{uid}": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "get user by uid\n\u003cbr\u003e",
                "operationId": "UserController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The uid",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": ":uid is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "description": "update the user\n\u003cbr\u003e",
                "operationId": "UserController.Update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The uid you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": ":uid is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "description": "delete the user\n\u003cbr\u003e",
                "operationId": "UserController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The uid you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "uid is empty"
                    }
                }
            }
        },
        "/user_plants/{uid}": {
            "get": {
                "tags": [
                    "user_plants"
                ],
                "description": "get UserPlant by User_id\n\u003cbr\u003e",
                "operationId": "UserPlantController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "user id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Disease"
                        }
                    },
                    "403": {
                        "description": ":uid is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Disease": {
            "title": "Disease",
            "type": "object",
            "properties": {
                "Disease_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "type": "string"
                },
                "Treatment": {
                    "type": "string"
                }
            }
        },
        "models.Notification": {
            "title": "Notification",
            "type": "object",
            "properties": {
                "Data": {
                    "type": "string"
                },
                "Notif_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Time": {
                    "type": "string",
                    "format": "datetime"
                },
                "User_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.PlantType": {
            "title": "PlantType",
            "type": "object",
            "properties": {
                "Name": {
                    "type": "string"
                },
                "PlantType_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Treatment": {
                    "type": "string"
                },
                "WateringFrequency": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Response": {
            "title": "Response",
            "type": "object"
        },
        "models.User": {
            "title": "User",
            "type": "object",
            "properties": {
                "Login": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Password": {
                    "type": "string"
                },
                "User_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "true": {
            "title": "true",
            "type": "object"
        }
    },
    "tags": [
        {
            "name": "user",
            "description": "Operations about Users\n"
        },
        {
            "name": "base_plants",
            "description": "Операции с типами растений\n"
        },
        {
            "name": "diseases",
            "description": "Операции с заболеваниями\n"
        },
        {
            "name": "user_plants",
            "description": "Operations about User's plants(Unfinished)\n"
        },
        {
            "name": "notifications",
            "description": "Operations about Notifications (as of now, only used in WebSockets, probably wont go in the final app)\n"
        }
    ]
}