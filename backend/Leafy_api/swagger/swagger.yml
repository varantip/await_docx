swagger: "2.0"
info:
  title: Leafy API
  description: |
    API Documentation for Leafy app
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /base_plants/:
    get:
      tags:
      - base_plants
      description: |-
        get all PlantTypes
        <br>
      operationId: PlantTypeController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.AllPlantTypesResponseExample'
  /base_plants/{id}:
    get:
      tags:
      - base_plants
      description: |-
        get plant_type by id
        <br>
      operationId: PlantTypeController.Get
      parameters:
      - in: path
        name: id
        description: айди типа растения
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.PlantType'
        "403":
          description: :id is empty
  /diseases/:
    get:
      tags:
      - diseases
      description: |-
        get all Diseases
        <br>
      operationId: DiseaseController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.AllDiseasesResponseExample'
  /diseases/{id}:
    get:
      tags:
      - diseases
      description: |-
        get Disease by id
        <br>
      operationId: DiseaseController.Get
      parameters:
      - in: path
        name: id
        description: Айди заболевания
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Disease'
        "403":
          description: :id is empty
  /identify/:
    post:
      tags:
      - identify
      description: |-
        identify a disease.
        <br>
      operationId: IdentController.Ident a disease
      parameters:
      - in: formData
        name: body
        description: "true"
        type: file
      responses:
        "200":
          description: ""
          schema:
            format: int64
            type: integer
  /notifications/:
    post:
      tags:
      - notifications
      description: |-
        Add a Notification
        <br>
      operationId: NotificationController.Post
      parameters:
      - in: body
        name: body
        description: 'The notfication, date specified like so: YYYY-MM-DDThh:mm:sstz
          (for kaliningrad tz = +0200)'
        required: true
        schema:
          $ref: '#/definitions/models.Notification'
      responses:
        "200":
          description: ""
          schema:
            format: int64
            type: integer
  /notifications/{uid}:
    get:
      tags:
      - notifications
      description: |-
        Gather Notifs by Id
        <br>
      operationId: NotificationController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Response'
    delete:
      tags:
      - notifications
      description: |-
        Delete all expired notifications
        <br>
      operationId: NotificationController.Delete
      parameters:
      - in: path
        name: uid
        description: The user_id for which you check and delete notifications
        required: true
        type: string
      responses:
        "200":
          description: '{string} success'
  /user/:
    get:
      tags:
      - user
      description: |-
        get user using jwt token
        <br>
      operationId: UserController.Get
      parameters:
      - in: header
        name: Authorization
        description: 'хедер Авторизации. пример(фигурные скобки убрать): Bearer {token}'
        schema:
          $ref: '#/definitions/true'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: no such user
    put:
      tags:
      - user
      description: |-
        update the user
        <br>
      operationId: UserController.Update
      parameters:
      - in: header
        name: Authorization
        description: 'хедер Авторизации. пример(фигурные скобки убрать): Bearer {token}'
        schema:
          $ref: '#/definitions/true'
      - in: body
        name: body
        description: Все данные о пользователе
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: data problems
    post:
      tags:
      - user
      description: |-
        create users
        <br>
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: все данные о новом пользователе(айди выберется автоматически,
          так что можно оставлять 0)
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.UserPostResponseExample'
        "403":
          description: body is empty
    delete:
      tags:
      - user
      description: |-
        delete the user
        <br>
      operationId: UserController.Delete
      parameters:
      - in: header
        name: Authorization
        description: 'хедер Авторизации. пример(фигурные скобки убрать): Bearer {token}'
        schema:
          $ref: '#/definitions/true'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.DeleteResponseExample'
        "403":
          description: header problems ??
  /user/all:
    get:
      tags:
      - user
      description: |-
        get all Users
        <br>
      operationId: UserController.GetAll
      parameters:
      - in: header
        name: Authorization
        description: 'хедер Авторизации. пример(фигурные скобки убрать): Bearer {token}'
        schema:
          $ref: '#/definitions/true'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.AllUsersResponseExample'
        "401":
          description: :not authorized
  /user/login:
    get:
      tags:
      - user
      description: |-
        Logs user into the system
        <br>
      operationId: UserController.Login
      parameters:
      - in: query
        name: login
        description: The login
        required: true
        type: string
      - in: query
        name: password
        description: The password
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.LoginResponseExample'
        "403":
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: |-
        Logs out current logged in user session
        <br>
      operationId: UserController.logout
      parameters:
      - in: header
        name: Authorization
        description: 'Хедер авторизации. example: Bearer {token}'
        schema:
          $ref: '#/definitions/true'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.LogoutResponseExample'
  /user_plants/:
    get:
      tags:
      - user_plants
      description: |-
        По JWT токену узнаётся пользователь и получаются все его растения
        <br>
      operationId: UserPlantController.Get
      parameters:
      - in: header
        name: Authorization
        description: 'хедер Авторизации. пример(фигурные скобки убрать): Bearer {token}'
        schema:
          $ref: '#/definitions/true'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.UserPlantsResponseExample'
    put:
      tags:
      - user_plants
      description: |-
        Обновление userplant'ов
        <br>
      operationId: UserPlantController.UpdateUserPlant
      parameters:
      - in: body
        name: body
        description: '<b>Все</b> данные о новом растении (даже айди юзера).<br> <b>Время
          обязательно должно быть строго форматировано</b>: YYYY-MM-DDThh:mm:ssTZ,
          T - просто буква, TZ - часовой пояс, для калининграда вместо TZ нужно +0200'
        schema:
          $ref: '#/definitions/models.UserPlant'
      - in: header
        name: Authorization
        description: 'хедер Авторизации. пример(фигурные скобки убрать): Bearer {token}'
        schema:
          $ref: '#/definitions/true'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.UserPlantPutResponseExample'
        "403":
          description: some of data is incorrect
    post:
      tags:
      - user_plants
      description: |-
        Создание userplant'ов
        <br>
      operationId: UserPlantController.CreateUserPlant
      parameters:
      - in: body
        name: body
        description: 'Данные о новом растении(айди юзера выбирается из хедера авторизации,
          дата последнего полива - автоматом: 01.01.01 00:00:00, остальное нужно указать
          ).<br> <b>Время обязательно должно быть строго форматировано</b>: YYYY-MM-DDThh:mm:ssTZ,
          T - просто буква, TZ - часовой пояс, для калининграда вместо TZ нужно +0200'
        schema:
          $ref: '#/definitions/models.UserPlant'
      - in: header
        name: Authorization
        description: 'хедер Авторизации. пример(фигурные скобки убрать): Bearer {token}'
        schema:
          $ref: '#/definitions/true'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.UserPostResponseExample'
        "403":
          description: some of data is incorrect
  /user_plants/all:
    get:
      tags:
      - user_plants
      description: |-
        Подаёшь в ссылку айди юзера вместо :uid и получаешь на выходе все растения этого пользователя
        <br>
      operationId: UserPlantController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.UserPlantsResponseExample'
        "403":
          description: :uid is empty
definitions:
  controllers.AllDiseasesResponseExample:
    title: AllDiseasesResponseExample
    type: object
    properties:
      Data:
        type: array
        items:
          $ref: '#/definitions/models.Disease'
      Err:
        type: boolean
        example: false
  controllers.AllPlantTypesResponseExample:
    title: AllPlantTypesResponseExample
    type: object
    properties:
      Data:
        type: array
        items:
          $ref: '#/definitions/models.PlantType'
      Err:
        type: boolean
        example: false
  controllers.AllUsersResponseExample:
    title: AllUsersResponseExample
    type: object
    properties:
      Data:
        type: array
        items:
          $ref: '#/definitions/models.User'
      Err:
        type: boolean
        example: false
  controllers.DeleteResponseExample:
    title: DeleteResponseExample
    type: object
    properties:
      Data:
        type: string
        example: Delete success
      Err:
        type: boolean
        example: false
  controllers.LoginResponseExample:
    title: LoginResponseExample
    type: object
    properties:
      Data:
        type: string
        example: ABCDEFGH123456789.ADDBSJADSAJDN0123032.ASDNINASIDAID31213
      Err:
        type: boolean
        example: false
  controllers.LogoutResponseExample:
    title: LogoutResponseExample
    type: object
    properties:
      Data:
        type: string
        example: Logout success
      Err:
        type: boolean
        example: false
  controllers.UserPlantPutResponseExample:
    title: UserPlantPutResponseExample
    type: object
    properties:
      Data:
        type: string
        example: Успешно изменено
      Err:
        type: boolean
        example: false
  controllers.UserPlantsResponseExample:
    title: UserPlantsResponseExample
    type: object
    properties:
      Data:
        type: array
        items:
          $ref: '#/definitions/models.UserPlant'
      Err:
        type: boolean
        example: false
  controllers.UserPostResponseExample:
    title: UserPostResponseExample
    type: object
    properties:
      Data:
        type: integer
        example: 1
        format: int64
      Err:
        type: boolean
        example: false
  models.Disease:
    title: Disease
    type: object
    properties:
      Disease_id:
        type: integer
        format: int64
      Name:
        type: string
      Treatment:
        type: string
  models.Notification:
    title: Notification
    type: object
    properties:
      Data:
        type: string
      Notif_id:
        type: integer
        format: int64
      Time:
        type: string
        format: datetime
      User_id:
        type: integer
        format: int64
  models.PlantType:
    title: PlantType
    type: object
    properties:
      Bio_Name:
        type: string
      Description:
        type: string
      Image_Link:
        type: string
      LightPreference:
        type: string
      Name:
        type: string
      PlantType_id:
        type: integer
        format: int64
      TemperaturePreference:
        type: string
      WateringFrequency:
        type: integer
        format: int64
  models.Response:
    title: Response
    type: object
  models.User:
    title: User
    type: object
    properties:
      Login:
        type: string
      Name:
        type: string
      Password:
        type: string
      User_id:
        type: integer
        format: int64
  models.UserPlant:
    title: UserPlant
    type: object
    properties:
      DateOfLastWatering:
        type: string
        format: datetime
      DateOfPlanting:
        type: string
        format: datetime
      Disease_id:
        type: integer
        format: int64
      Nickname:
        type: string
      PlantType_id:
        type: integer
        format: int64
      User_id:
        type: integer
        format: int64
      UserPlant_id:
        type: integer
        format: int64
  "true":
    title: "true"
    type: object
tags:
- name: user
  description: |
    Operations about Users
- name: base_plants
  description: |
    Операции с типами растений
- name: diseases
  description: |
    Операции с заболеваниями
- name: user_plants
  description: |
    Operations about User's plants(Unfinished)
- name: notifications
  description: |
    Operations about Notifications (as of now, only used in WebSockets, probably wont go in the final app)
- name: identify
  description: |
    Operations about Identyf
